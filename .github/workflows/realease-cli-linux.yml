name: Release CLI LINUX

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          override: true
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libavformat-dev \
            libavfilter-dev \
            libavdevice-dev \
            ffmpeg \
            libasound2-dev \
            pkg-config \
            libtesseract-dev \
            tesseract-ocr

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build with RPATH
        run: |
          export PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH"
          # Set RPATH to look for shared libraries in relative lib directory
          export RUSTFLAGS="-C link-arg=-Wl,-rpath,\$ORIGIN/../lib"
          cargo build --release --features pipes

      - name: Copy dependencies
        run: |
          mkdir -p screenpipe-linux/bin
          mkdir -p screenpipe-linux/lib
          # Copy the main binary
          cp target/release/screenpipe screenpipe-linux/bin/
          chmod +x screenpipe-linux/bin/screenpipe
          # Copy required shared libraries
          cp /usr/lib/x86_64-linux-gnu/libavcodec.so* screenpipe-linux/lib/
          cp /usr/lib/x86_64-linux-gnu/libavformat.so* screenpipe-linux/lib/
          cp /usr/lib/x86_64-linux-gnu/libavutil.so* screenpipe-linux/lib/
          cp /usr/lib/x86_64-linux-gnu/libswresample.so* screenpipe-linux/lib/
          cp /usr/lib/x86_64-linux-gnu/libswscale.so* screenpipe-linux/lib/
          cp /usr/lib/x86_64-linux-gnu/libavfilter.so* screenpipe-linux/lib/
          cp /usr/lib/x86_64-linux-gnu/libavdevice.so* screenpipe-linux/lib/
          cp /usr/lib/x86_64-linux-gnu/libtesseract.so* screenpipe-linux/lib/
          # Copy any other required dependencies
          ldd target/release/screenpipe | grep "=> /" | awk '{print $3}' | xargs -I '{}' cp -v '{}' screenpipe-linux/lib/

      - name: Create tarball
        run: |
          tar -czf screenpipe-linux-x86_64.tar.gz screenpipe-linux

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: screenpipe-linux
          path: screenpipe-linux-x86_64.tar.gz

  test-linux-package:
    needs: build-linux
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: screenpipe-linux

      - name: Extract and test package
        run: |
          tar xf screenpipe-linux-x86_64.tar.gz
          cd screenpipe-linux
          # Test if binary runs
          LD_LIBRARY_PATH=./lib ./bin/screenpipe --version

  release:
    needs: [test-linux-package]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: screenpipe-linux

      # Set version from tag or generate fallback version
      - name: Set version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="0.0.0-$(date +%Y%m%d%H%M%S)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ env.VERSION }} screenpipe-linux-x86_64.tar.gz \
            --title "Release v${{ env.VERSION }}" \
            --generate-notes \
            --draft=false \
            || gh release upload v${{ env.VERSION }} screenpipe-linux-x86_64.tar.gz --clobber