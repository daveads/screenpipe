name: Windows Integration Test

on:
  push:
    branches: [ cli-test ]
  pull_request:
    branches: [ cli-test ]

jobs:
  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install dependencies
      shell: pwsh
      run: |
        choco install ffmpeg tesseract imagemagick
        echo "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Verify installations
      shell: pwsh
      run: |
        ffmpeg -version
        tesseract --version
        magick -version
        tesseract --list-langs

    - name: Build CLI
      run: cargo build --release

    - name: Debug environment
      shell: pwsh
      run: |
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "User profile: $env:USERPROFILE"
        Get-WmiObject -Class Win32_VideoController | Select-Object Name, AdapterRAM, DriverVersion
        Write-Host "PATH: $env:PATH"
        Write-Host "Tesseract location: $(Get-Command tesseract).Path"

    - name: Prepare OCR test image
      shell: pwsh
      run: |
        magick -size 600x200 xc:white -font Arial -pointsize 48 -fill black -draw "text 20,100 'Hello, Screenpipe OCR'" test_image.png
        if (Test-Path test_image.png) {
          Write-Host "Test image created successfully"
          magick identify test_image.png
        } else {
          Write-Host "Failed to create test image"
          exit 1
        }

    - name: Verify audio file
      shell: pwsh
      run: |
        if (Test-Path ".github\scripts\audio_test.wav") {
          Write-Host "Audio test file found"
        } else {
          Write-Host "Audio test file not found"
          exit 1
        }

    - name: Run CLI and capture output
      shell: pwsh
      run: |
        $env:PATH += ";C:\Program Files\Tesseract-OCR;C:\ProgramData\chocolatey\bin"
        $env:RUST_LOG = "debug"
        $process = Start-Process -FilePath ".\target\release\screenpipe.exe" -ArgumentList "--debug" -PassThru -RedirectStandardOutput "screenpipe_output.log" -RedirectStandardError "screenpipe_error.log" -NoNewWindow
        Start-Sleep -Seconds 20
        
        # Display OCR test image
        Start-Process -FilePath "mspaint.exe" -ArgumentList "test_image.png" -PassThru
        Start-Sleep -Seconds 40
        
        # Play audio test file
        (New-Object Media.SoundPlayer ".github\scripts\audio_test.wav").PlaySync()
        Start-Sleep -Seconds 30
        
        Stop-Process -Id $process.Id -Force

    - name: Check for crashes and expected behavior
      shell: pwsh
      run: |
        Write-Host "Checking for log file..."
        $LogFile = Get-ChildItem -Path $env:USERPROFILE -Recurse -Filter "screenpipe.log" -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
        if ($LogFile) {
          Write-Host "Log file found at: $LogFile"
          if (Select-String -Path $LogFile -Pattern "panic" -Quiet) {
            Write-Host "CLI crashed"
            Get-Content $LogFile
            exit 1
          }
          Write-Host "CLI ran successfully without crashing"
          Get-Content $LogFile -Tail 100
          
          # Check for OCR result
          if (Select-String -Path $LogFile -Pattern "Hello, Screenpipe OCR" -Quiet) {
            Write-Host "OCR test passed: Text was recognized"
          } else {
            Write-Host "OCR test failed: Text was not recognized"
            Get-Content $LogFile | Select-String "OCR" -Context 10,10
            exit 1
          }
          
          # Check for audio capture result
          if (Select-String -Path $LogFile -Pattern "human world" -Quiet) {
            Write-Host "Audio capture test passed: Expected phrase was transcribed"
          } else {
            Write-Host "Audio capture test failed: Expected phrase was not transcribed"
            exit 1
          }
        } else {
          Write-Host "Log file not found, checking standard output..."
          Get-Content "screenpipe_output.log" -Tail 100
          Get-Content "screenpipe_error.log" -Tail 100
          exit 1
        }

    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-logs
        path: |
          ${{ env.USERPROFILE }}\.screenpipe\logs\
          screenpipe_output.log
          screenpipe_error.log

    - name: Upload captured data
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-data
        path: ${{ env.USERPROFILE }}\.screenpipe\data\

    - name: Upload test files and screenshots
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-files-and-screenshots
        path: |
          test_image.png
          .github\scripts\audio_test.wav
          ${{ env.USERPROFILE }}\.screenpipe\data\**\*.png

    - name: List captured files
      shell: pwsh
      run: |
        Write-Host "Listing files in .screenpipe\data directory:"
        Get-ChildItem -Path "$env:USERPROFILE\.screenpipe\data" -Recurse | Select-Object FullName, Length, CreationTime | Format-Table -AutoSize