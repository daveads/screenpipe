name: Windows CLI Integration Test

on:
  push:
    branches: [ cli-test ]
  pull_request:
    branches: [ cli-test ]

jobs:
  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install dependencies
      shell: pwsh
      run: |
        choco install ffmpeg openssl imagemagick
        echo "C:\ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install Scream on Windows
      shell: powershell
      run: |
        Invoke-WebRequest https://github.com/duncanthrax/scream/releases/download/4.0/Scream4.0.zip -OutFile Scream4.0.zip
        Expand-Archive -Path Scream4.0.zip -DestinationPath Scream
        openssl req -batch -verbose -x509 -newkey rsa -keyout ScreamCertificate.pvk -out ScreamCertificate.cer -nodes -extensions v3_req
        openssl pkcs12 -export -nodes -in ScreamCertificate.cer -inkey ScreamCertificate.pvk -out ScreamCertificate.pfx -passout pass:

    - name: Setup MSVC Dev Cmd
      uses: ilammy/msvc-dev-cmd@v1

    - name: Sign and Install Scream Driver on Windows
      shell: powershell
      run: |
        signtool sign /v /fd SHA256 /f ScreamCertificate.pfx Scream\Install\driver\x64\Scream.cat
        Import-Certificate -FilePath ScreamCertificate.cer -CertStoreLocation Cert:\LocalMachine\root
        Import-Certificate -FilePath ScreamCertificate.cer -CertStoreLocation Cert:\LocalMachine\TrustedPublisher
        Scream\Install\helpers\devcon-x64.exe install Scream\Install\driver\x64\Scream.inf *Scream
      timeout-minutes: 5

    - name: Start Windows Audio Service
      shell: powershell
      run: net start audiosrv

    - name: Build CLI
      run: cargo build --release

    - name: Run Screenpipe
      shell: pwsh
      run: |
        $env:RUST_LOG = "trace"
        $process = Start-Process -FilePath ".\target\release\screenpipe.exe" -ArgumentList "--debug" -RedirectStandardOutput "screenpipe_output.log" -RedirectStandardError "screenpipe_error.log" -PassThru -NoNewWindow
        $process.Id | Out-File -FilePath screenpipe.pid
        Write-Host "Screenpipe started with PID: $($process.Id)"
        
        # Wait for the server to start or timeout after 2 minutes
        $timeout = New-TimeSpan -Minutes 2
        $sw = [diagnostics.stopwatch]::StartNew()
        $serverStarted = $false
        
        while ($sw.elapsed -lt $timeout) {
          if (Select-String -Path "screenpipe_output.log" -Pattern "Server starting on 127.0.0.1:3030" -Quiet) {
            $serverStarted = $true
            Write-Host "Screenpipe server started successfully"
            break
          }
          Start-Sleep -Seconds 5
        }
        
        if (-not $serverStarted) {
          Write-Host "Screenpipe server failed to start within the timeout period"
          Get-Content "screenpipe_output.log" -Tail 100
          Get-Content "screenpipe_error.log" -Tail 100
          exit 1
        }
        
        # Additional 60 seconds wait for full initialization
        Start-Sleep -Seconds 60

    - name: Test OCR
      shell: pwsh
      run: |
        Write-Host "Creating test image..."
        magick -size 300x100 xc:white -font Arial -pointsize 24 -fill black -draw "text 10,50 'Hello, Screenpipe OCR'" test_image.png

        Write-Host "Displaying test image..."
        $image = Start-Process mspaint -ArgumentList "test_image.png" -PassThru

        Write-Host "Waiting for image to be processed..."
        $timeout = 120  # Increased timeout to 2 minutes
        $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
        $ocrDetected = $false
        while ($stopwatch.Elapsed.TotalSeconds -lt $timeout -and -not $ocrDetected) {
          if (Select-String -Path "screenpipe_output.log" -Pattern "Hello, Screenpipe OCR|OCR detected text|Performing OCR" -Quiet) {
            $ocrDetected = $true
            Write-Host "OCR test passed: Text or OCR detection found in logs"
          } else {
            Start-Sleep -Seconds 5
          }
        }

        Stop-Process -Id $image.Id

        if (-not $ocrDetected) {
          Write-Host "OCR test failed: Text was not recognized within timeout"
          Write-Host "Last 200 lines of log:"
          Get-Content "screenpipe_output.log" -Tail 200
          exit 1
        }

    - name: Test Audio Capture
      shell: pwsh
      run: |
        Write-Host "Verifying audio file exists..."
        Get-Item .github\scripts\audio_test.wav

        Write-Host "Playing audio file..."
        $player = New-Object System.Media.SoundPlayer
        $player.SoundLocation = ".github\scripts\audio_test.wav"
        $player.PlaySync()

        Write-Host "Waiting for audio to be processed..."
        $timeout = 120  # Increased timeout to 2 minutes
        $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
        $audioDetected = $false
        while ($stopwatch.Elapsed.TotalSeconds -lt $timeout -and -not $audioDetected) {
          if (Select-String -Path "screenpipe_output.log" -Pattern "human world|audio transcription|speech detected" -Quiet) {
            $audioDetected = $true
            Write-Host "Audio capture test passed: Relevant audio-related output found in logs"
          } else {
            Start-Sleep -Seconds 5
          }
        }

        if (-not $audioDetected) {
          Write-Host "Audio capture test failed: No relevant audio-related output found in logs"
          Write-Host "Last 200 lines of log:"
          Get-Content "screenpipe_output.log" -Tail 200
          exit 1
        }

    - name: Stop screenpipe
      shell: pwsh
      run: |
        $pidFile = "screenpipe.pid"
        if (Test-Path $pidFile) {
          $pid = Get-Content $pidFile
          Write-Host "Screenpipe PID from file: $pid"
          
          $process = Get-Process -Id $pid -ErrorAction SilentlyContinue
          if ($process) {
            Write-Host "Screenpipe process is still running. Stopping it now."
            Stop-Process -Id $pid -Force
            Start-Sleep -Seconds 10  # Wait for graceful shutdown
          } else {
            Write-Host "Screenpipe process is not running. It may have crashed or exited unexpectedly."
            Get-WinEvent -FilterHashtable @{LogName='Application'; ID=1000} -MaxEvents 10 | Format-List
          }
        } else {
          Write-Host "PID file not found. Screenpipe may not have started correctly."
        }
        
        # Check for any remaining screenpipe processes and stop them
        Get-Process | Where-Object {$_.ProcessName -eq "screenpipe"} | ForEach-Object {
          Write-Host "Found additional screenpipe process with PID $($_.Id). Stopping it."
          Stop-Process -Id $_.Id -Force
        }

    - name: Collect process and system information
      if: failure()
      shell: pwsh
      run: |
        Write-Host "Collecting process information..."
        Get-Process | Where-Object {$_.ProcessName -like "*screen*" -or $_.ProcessName -like "*rust*" -or $_.ProcessName -eq "mspaint"} | Format-Table -AutoSize
        
        Write-Host "Collecting system event logs..."
        Get-WinEvent -FilterHashtable @{LogName='System'; Level=1,2,3} -MaxEvents 50 | Format-Table -AutoSize
        
        Write-Host "Collecting application event logs..."
        Get-WinEvent -FilterHashtable @{LogName='Application'; Level=1,2,3} -MaxEvents 50 | Format-Table -AutoSize

    - name: Check for crashes and expected behavior
      shell: pwsh
      run: |
        Write-Host "Checking log file..."
        Write-Host "Last 200 lines of log:"
        Get-Content "screenpipe_output.log" -Tail 200
        if (Select-String -Path "screenpipe_output.log" -Pattern "panic|error|exception" -Quiet) {
          Write-Host "CLI crashed or encountered errors"
          exit 1
        }
        if (-not (Select-String -Path "screenpipe_output.log" -Pattern "Server starting on 127.0.0.1:3030" -Quiet)) {
          Write-Host "Server did not start correctly"
          exit 1
        }
        Write-Host "CLI ran successfully without crashing"

    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-logs
        path: |
          screenpipe_output.log
          screenpipe_error.log

    - name: Upload captured data
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-data
        path: ${{ env.USERPROFILE }}\.screenpipe\data\

    - name: Upload test image
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-image
        path: test_image.png
