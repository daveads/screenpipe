name: Windows CLI Integration Test

on:
  push:
    branches: [ cli-test ]
  pull_request:
    branches: [ cli-test ]

jobs:
  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install dependencies
      shell: pwsh
      run: |
        choco install ffmpeg openssl imagemagick
        echo "C:\ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install Scream on Windows
      shell: powershell
      run: |
        Invoke-WebRequest https://github.com/duncanthrax/scream/releases/download/4.0/Scream4.0.zip -OutFile Scream4.0.zip
        Expand-Archive -Path Scream4.0.zip -DestinationPath Scream
        openssl req -batch -verbose -x509 -newkey rsa -keyout ScreamCertificate.pvk -out ScreamCertificate.cer -nodes -extensions v3_req
        openssl pkcs12 -export -nodes -in ScreamCertificate.cer -inkey ScreamCertificate.pvk -out ScreamCertificate.pfx -passout pass:

    - name: Setup MSVC Dev Cmd
      uses: ilammy/msvc-dev-cmd@v1

    - name: Sign and Install Scream Driver on Windows
      shell: powershell
      run: |
        signtool sign /v /fd SHA256 /f ScreamCertificate.pfx Scream\Install\driver\x64\Scream.cat
        Import-Certificate -FilePath ScreamCertificate.cer -CertStoreLocation Cert:\LocalMachine\root
        Import-Certificate -FilePath ScreamCertificate.cer -CertStoreLocation Cert:\LocalMachine\TrustedPublisher
        Scream\Install\helpers\devcon-x64.exe install Scream\Install\driver\x64\Scream.inf *Scream
      timeout-minutes: 5

    - name: Start Windows Audio Service
      shell: powershell
      run: net start audiosrv

    - name: Build CLI
      run: cargo build --release

    - name: Run Screenpipe
      shell: pwsh
      run: |
        $env:RUST_LOG = "trace"
        Start-Process -FilePath ".\target\release\screenpipe.exe" -ArgumentList "--debug" -RedirectStandardOutput "screenpipe_output.log" -RedirectStandardError "screenpipe_error.log" -NoNewWindow
        $screenpipePID = (Get-Process screenpipe).Id
        echo $screenpipePID > screenpipe.pid
        Start-Sleep -Seconds 30  # Let screenpipe initialize

    - name: Test Audio Capture
      shell: pwsh
      run: |
        Write-Host "Verifying audio file exists..."
        Get-Item .github\scripts\audio_test.wav

        Write-Host "Playing audio file..."
        $player = New-Object System.Media.SoundPlayer
        $player.SoundLocation = ".github\scripts\audio_test.wav"
        $player.PlaySync()

        Write-Host "Waiting for audio to be processed..."
        Start-Sleep -Seconds 30

        Write-Host "Checking logs for audio result..."
        if (Select-String -Path "screenpipe_output.log" -Pattern "human world" -Quiet) {
          Write-Host "Audio capture test passed: 'human world' found in logs"
        } elseif (Select-String -Path "screenpipe_output.log" -Pattern "audio" -Quiet) {
          Write-Host "Audio capture test partially passed: Audio-related output found in logs, but not the specific phrase"
          Write-Host "Grep results for 'audio':"
          Select-String -Path "screenpipe_output.log" -Pattern "audio"
        } else {
          Write-Host "Audio capture test failed: Neither 'human world' nor audio-related output found in logs"
          Write-Host "Last 100 lines of log:"
          Get-Content "screenpipe_output.log" -Tail 100
          exit 1
        }

    - name: Stop screenpipe
      shell: pwsh
      run: |
        Stop-Process -Id (Get-Content screenpipe.pid)
        Start-Sleep -Seconds 5  # Give time for graceful shutdown

    - name: Check for crashes and expected behavior
      shell: pwsh
      run: |
        Write-Host "Checking log file..."
        Write-Host "Last 100 lines of log:"
        Get-Content "screenpipe_output.log" -Tail 100
        if (Select-String -Path "screenpipe_output.log" -Pattern "panic" -Quiet) {
          Write-Host "CLI crashed"
          exit 1
        }
        if (-not (Select-String -Path "screenpipe_output.log" -Pattern "Server starting on 127.0.0.1:3030" -Quiet)) {
          Write-Host "Server did not start correctly"
          exit 1
        }
        Write-Host "CLI ran successfully without crashing"

    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-logs
        path: |
          screenpipe_output.log
          screenpipe_error.log

    - name: Upload captured data
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-data
        path: ${{ env.USERPROFILE }}\.screenpipe\data\

    - name: Upload test image
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-image
        path: test_image.png
