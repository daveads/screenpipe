name: Windows CLI Integration Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 22

    - name: Install Rust
      run: |
        Invoke-WebRequest https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-gnu/rustup-init.exe -OutFile rustup-init.exe
        .\rustup-init.exe -y

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        override: true
        cache: true
        rustflags: ""

    - name: Install Chocolatey
      run: Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    - name: Install dependencies
      shell: pwsh
      run: |
        choco install ffmpeg openssl
        echo "C:\ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install Scream on Windows
      shell: powershell
      run: |
        Invoke-WebRequest https://github.com/duncanthrax/scream/releases/download/4.0/Scream4.0.zip -OutFile Scream4.0.zip
        Expand-Archive -Path Scream4.0.zip -DestinationPath Scream
        openssl req -batch -verbose -x509 -newkey rsa -keyout ScreamCertificate.pvk -out ScreamCertificate.cer -nodes -extensions v3_req
        openssl pkcs12 -export -nodes -in ScreamCertificate.cer -inkey ScreamCertificate.pvk -out ScreamCertificate.pfx -passout pass:

    - name: Setup MSVC Dev Cmd
      uses: ilammy/msvc-dev-cmd@v1

    - name: Sign and Install Scream Driver on Windows
      shell: powershell
      run: |
        signtool sign /v /fd SHA256 /f ScreamCertificate.pfx Scream\Install\driver\x64\Scream.cat
        Import-Certificate -FilePath ScreamCertificate.cer -CertStoreLocation Cert:\LocalMachine\root
        Import-Certificate -FilePath ScreamCertificate.cer -CertStoreLocation Cert:\LocalMachine\TrustedPublisher
        Scream\Install\helpers\devcon-x64.exe install Scream\Install\driver\x64\Scream.inf *Scream
      timeout-minutes: 5

    - name: Start Windows Audio Service
      shell: powershell
      run: net start audiosrv

    - name: Build CLI
      run: cargo build --release

    - name: Run CLI and generate activity
      shell: pwsh
      run: |
        $env:RUST_LOG = "debug"
        $process = Start-Process -FilePath ".\target\release\screenpipe.exe" -ArgumentList "--debug" -PassThru -RedirectStandardOutput "screenpipe_output.log" -RedirectStandardError "screenpipe_error.log" -NoNewWindow
        Start-Sleep -Seconds 10
        
        # Generate some screen activity
        for ($i = 0; $i -lt 5; $i++) {
          Start-Process "notepad.exe"
          Start-Sleep -Seconds 2
          Stop-Process -Name "notepad" -Force
          Start-Sleep -Seconds 2
        }
        
        # Generate some audio using PowerShell
        [console]::beep(2000,1000)
        
        Start-Sleep -Seconds 30  # Allow more time for processing
        Stop-Process -Id $process.Id -Force

    - name: Check for crashes and captured data
      shell: pwsh
      run: |
        if (Select-String -Path "screenpipe_output.log" -Pattern "panic" -Quiet) {
          Write-Host "CLI crashed"
          Get-Content "screenpipe_output.log"
          exit 1
        }
        Write-Host "CLI ran successfully without crashing"
        
        $capturedFiles = Get-ChildItem -Path "$env:USERPROFILE\.screenpipe\data" -Recurse
        if ($capturedFiles.Count -eq 0) {
          Write-Host "No data was captured"
          exit 1
        }
        Write-Host "Data captured successfully. File count: $($capturedFiles.Count)"
        
        if (Select-String -Path "screenpipe_error.log" -Pattern "no audio devices available" -Quiet) {
          Write-Host "Audio device setup failed"
          exit 1
        }
        
        Get-Content "screenpipe_output.log" -Tail 100
        Get-Content "screenpipe_error.log"

    - name: Upload logs and data
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-logs-and-data
        path: |
          screenpipe_output.log
          screenpipe_error.log
          ${{ env.USERPROFILE }}\.screenpipe\data\

name: Windows CLI Integration Test

on:
  push:
    branches: [ cli-test ]
  pull_request:
    branches: [ cli-test ]

jobs:
  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install dependencies
      shell: pwsh
      run: |
        choco install ffmpeg openssl imagemagick
        echo "C:\ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install Scream on Windows
      shell: powershell
      run: |
        Invoke-WebRequest https://github.com/duncanthrax/scream/releases/download/4.0/Scream4.0.zip -OutFile Scream4.0.zip
        Expand-Archive -Path Scream4.0.zip -DestinationPath Scream
        openssl req -batch -verbose -x509 -newkey rsa -keyout ScreamCertificate.pvk -out ScreamCertificate.cer -nodes -extensions v3_req
        openssl pkcs12 -export -nodes -in ScreamCertificate.cer -inkey ScreamCertificate.pvk -out ScreamCertificate.pfx -passout pass:

    - name: Setup MSVC Dev Cmd
      uses: ilammy/msvc-dev-cmd@v1

    - name: Sign and Install Scream Driver on Windows
      shell: powershell
      run: |
        signtool sign /v /fd SHA256 /f ScreamCertificate.pfx Scream\Install\driver\x64\Scream.cat
        Import-Certificate -FilePath ScreamCertificate.cer -CertStoreLocation Cert:\LocalMachine\root
        Import-Certificate -FilePath ScreamCertificate.cer -CertStoreLocation Cert:\LocalMachine\TrustedPublisher
        Scream\Install\helpers\devcon-x64.exe install Scream\Install\driver\x64\Scream.inf *Scream
      timeout-minutes: 5

    - name: Start Windows Audio Service
      shell: powershell
      run: net start audiosrv

    - name: Build CLI
      run: cargo build --release

    - name: Run Screenpipe
      shell: pwsh
      run: |
        $env:RUST_LOG = "trace"
        $process = Start-Process -FilePath ".\target\release\screenpipe.exe" -ArgumentList "--debug" -RedirectStandardOutput "screenpipe_output.log" -RedirectStandardError "screenpipe_error.log" -PassThru -NoNewWindow
        $process.Id | Out-File -FilePath screenpipe.pid
        Write-Host "Screenpipe started with PID: $($process.Id)"
        
        # Wait for the server to start or timeout after 2 minutes
        $timeout = New-TimeSpan -Minutes 2
        $sw = [diagnostics.stopwatch]::StartNew()
        $serverStarted = $false
        
        while ($sw.elapsed -lt $timeout) {
          if (Select-String -Path "screenpipe_output.log" -Pattern "Server starting on 127.0.0.1:3030" -Quiet) {
            $serverStarted = $true
            Write-Host "Screenpipe server started successfully"
            break
          }
          Start-Sleep -Seconds 5
        }
        
        if (-not $serverStarted) {
          Write-Host "Screenpipe server failed to start within the timeout period"
          Get-Content "screenpipe_output.log" -Tail 100
          Get-Content "screenpipe_error.log" -Tail 100
          exit 1
        }
        
        # Additional 60 seconds wait for full initialization
        Start-Sleep -Seconds 60

    - name: Test OCR
      shell: pwsh
      run: |
        Write-Host "Creating test image..."
        $testPhrase = "SCREENPIPE_OCR_TEST_1234"
        magick -size 800x600 xc:white -font Arial -pointsize 48 -fill black -draw "text 50,300 '$testPhrase'" test_image.png

        Write-Host "Displaying test image..."
        $image = Start-Process mspaint -ArgumentList "test_image.png" -PassThru
        Start-Sleep -Seconds 2  # Wait for mspaint to open
        $wshell = New-Object -ComObject wscript.shell
        $wshell.AppActivate($image.Id)
        $wshell.SendKeys("% x")  # ALT+SPACE, x to maximize

        Write-Host "Waiting for image to be processed..."
        $timeout = 180  # Increased timeout to 3 minutes
        $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
        $ocrDetected = $false
        while ($stopwatch.Elapsed.TotalSeconds -lt $timeout -and -not $ocrDetected) {
          $logContent = Get-Content "screenpipe_output.log" -Tail 1000
          if ($logContent -match $testPhrase -or $logContent -match "OCR detected text" -or $logContent -match "Performing OCR") {
            $ocrDetected = $true
            Write-Host "OCR test passed: Text or OCR detection found in logs"
            Write-Host "Matching log line: $($matches[0])"
          } else {
            Write-Host "Waiting for OCR detection... Elapsed time: $($stopwatch.Elapsed.TotalSeconds) seconds"
            Start-Sleep -Seconds 10
          }
        }

        Stop-Process -Id $image.Id

        if (-not $ocrDetected) {
          Write-Host "OCR test failed: Text was not recognized within timeout"
          Write-Host "Last 500 lines of log:"
          Get-Content "screenpipe_output.log" -Tail 500
          exit 1
        }

    - name: Collect OCR Debug Information
      if: failure()
      shell: pwsh
      run: |
        Write-Host "Collecting OCR debug information..."
        Write-Host "Screenpipe process status:"
        Get-Process screenpipe -ErrorAction SilentlyContinue | Format-List

        Write-Host "Windows OCR components status:"
        Get-WindowsCapability -Online | Where-Object { $_.Name -like "*TextRecognition*" } | Format-Table

        Write-Host "Last 1000 lines of Screenpipe log:"
        Get-Content "screenpipe_output.log" -Tail 1000

        Write-Host "System resource usage:"
        Get-Process | Where-Object { $_.ProcessName -eq "screenpipe" -or $_.ProcessName -eq "mspaint" } | Format-Table Id, ProcessName, CPU, WorkingSet, VirtualMemorySize

        Write-Host "Checking if test image exists:"
        if (Test-Path "test_image.png") {
          Write-Host "Test image exists"
        } else {
          Write-Host "Test image does not exist"
        }


    - name: Check for crashes and expected behavior
      shell: pwsh
      run: |
        Write-Host "Checking log file..."
        Write-Host "Last 200 lines of log:"
        Get-Content "screenpipe_output.log" -Tail 200
        if (Select-String -Path "screenpipe_output.log" -Pattern "panic|error|exception" -Quiet) {
          Write-Host "CLI crashed or encountered errors"
          exit 1
        }
        if (-not (Select-String -Path "screenpipe_output.log" -Pattern "Server starting on 127.0.0.1:3030" -Quiet)) {
          Write-Host "Server did not start correctly"
          exit 1
        }
        Write-Host "CLI ran successfully without crashing"

    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-logs
        path: |
          screenpipe_output.log
          screenpipe_error.log

    - name: Upload captured data
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-data
        path: ${{ env.USERPROFILE }}\.screenpipe\data\

    - name: Upload test image
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-image
        path: test_image.png
