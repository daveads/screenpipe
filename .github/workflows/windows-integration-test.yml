name: Windows Integration Test

on:
  push:
    branches: [ cli-test ]
  pull_request:
    branches: [ cli-test ]

jobs:
  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install dependencies
      shell: pwsh
      run: |
        choco install ffmpeg tesseract imagemagick
        echo "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "C:\ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Verify installations
      shell: pwsh
      run: |
        ffmpeg -version
        tesseract --version
        magick -version
        tesseract --list-langs

    - name: Build CLI
      run: cargo build --release

    - name: Debug environment
      shell: pwsh
      run: |
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "User profile: $env:USERPROFILE"
        Get-WmiObject -Class Win32_VideoController | Select-Object Name, AdapterRAM, DriverVersion
        Write-Host "PATH: $env:PATH"
        Write-Host "Tesseract location: $(Get-Command tesseract).Path"

    - name: Prepare OCR test image
      shell: pwsh
      run: |
        magick -size 600x200 xc:white -font Arial -pointsize 48 -fill black -draw "text 20,100 'Hello, Screenpipe OCR'" test_image.png
        if (Test-Path test_image.png) {
          Write-Host "Test image created successfully"
          magick identify test_image.png
        } else {
          Write-Host "Failed to create test image"
          exit 1
        }

    - name: Run CLI and capture output
      shell: pwsh
      run: |
        $env:PATH += ";C:\Program Files\Tesseract-OCR;C:\ProgramData\chocolatey\bin"
        $env:RUST_LOG = "trace"  # Set log level to trace for maximum detail
        $process = Start-Process -FilePath ".\target\release\screenpipe.exe" -ArgumentList "--debug" -PassThru -RedirectStandardOutput "screenpipe_output.log" -RedirectStandardError "screenpipe_error.log" -NoNewWindow
        Start-Sleep -Seconds 20
        
        # Display OCR test image
        $paint = Start-Process -FilePath "mspaint.exe" -ArgumentList "test_image.png" -PassThru
        Start-Sleep -Seconds 5
        $paint.MainWindowHandle | ForEach-Object { [void][System.Runtime.InteropServices.Marshal]::SendMessage($_, 0x0112, 0xF030, 0) }
        Start-Sleep -Seconds 60  # Increase wait time to 60 seconds
        
        # Capture a screenshot for verification
        Add-Type -AssemblyName System.Windows.Forms,System.Drawing
        $bounds = [Windows.Forms.Screen]::PrimaryScreen.Bounds
        $bmp = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
        $graphics = [Drawing.Graphics]::FromImage($bmp)
        $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.Size)
        $bmp.Save("test_screenshot.png")
        $graphics.Dispose()
        $bmp.Dispose()
        
        Stop-Process -Id $paint.Id
        Stop-Process -Id $process.Id -Force

    - name: Check for crashes and expected behavior
      shell: pwsh
      run: |
        Write-Host "Checking for log file..."
        $LogFile = Get-ChildItem -Path $env:USERPROFILE -Recurse -Filter "screenpipe.log" -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
        if ($LogFile) {
          Write-Host "Log file found at: $LogFile"
          if (Select-String -Path $LogFile -Pattern "panic" -Quiet) {
            Write-Host "CLI crashed"
            Get-Content $LogFile
            exit 1
          }
          Write-Host "CLI ran successfully without crashing"
          Get-Content $LogFile -Tail 200  # Increase number of lines to display
          
          # Check for OCR result
          $ocrResults = Select-String -Path $LogFile -Pattern "OCR result:" -Context 0,10
          if ($ocrResults) {
            Write-Host "OCR results found:"
            $ocrResults | ForEach-Object { $_.Line }
          } else {
            Write-Host "No OCR results found in the log"
          }
          
          if (Select-String -Path $LogFile -Pattern "Hello, Screenpipe OCR" -Quiet) {
            Write-Host "OCR test passed: Text was recognized"
          } else {
            Write-Host "OCR test failed: Text was not recognized"
            exit 1
          }
        } else {
          Write-Host "Log file not found, checking standard output..."
          Get-Content "screenpipe_output.log" -Tail 200
          Get-Content "screenpipe_error.log" -Tail 200
          exit 1
        }

    - name: Upload logs and screenshots
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-logs-and-screenshots
        path: |
          ${{ env.USERPROFILE }}\.screenpipe\logs\
          screenpipe_output.log
          screenpipe_error.log
          test_image.png
          test_screenshot.png
          ${{ env.USERPROFILE }}\.screenpipe\data\**\*.png

    - name: List captured files
      shell: pwsh
      run: |
        Write-Host "Listing files in .screenpipe\data directory:"
        Get-ChildItem -Path "$env:USERPROFILE\.screenpipe\data" -Recurse | Select-Object FullName, Length, CreationTime | Format-Table -AutoSize