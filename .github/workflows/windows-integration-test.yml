name: CLI Integration Test

on:
  push:
    branches: [ cli-test ]
  pull_request:
    branches: [ cli-test ]

jobs:
  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install dependencies
      shell: pwsh
      run: |
        choco install ffmpeg
        echo "C:\ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Build CLI
      run: cargo build --release

    - name: Run CLI and capture output
      shell: pwsh
      run: |
        $env:RUST_LOG = "debug"
        $process = Start-Process -FilePath ".\target\release\screenpipe.exe" -ArgumentList "--debug" -PassThru -RedirectStandardOutput "screenpipe_output.log" -RedirectStandardError "screenpipe_error.log" -NoNewWindow
        Start-Sleep -Seconds 60
        Stop-Process -Id $process.Id -Force

    - name: Check for crashes
      shell: pwsh
      run: |
        if (Select-String -Path "screenpipe_output.log" -Pattern "panic" -Quiet) {
          Write-Host "CLI crashed"
          Get-Content "screenpipe_output.log"
          exit 1
        }
        Write-Host "CLI ran successfully without crashing"
        Get-Content "screenpipe_output.log" -Tail 100

    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: windows-logs
        path: |
          screenpipe_output.log
          screenpipe_error.log

  test-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libavformat-dev libavfilter-dev libavdevice-dev ffmpeg xvfb

    - name: Build CLI
      run: cargo build --release

    - name: Set up virtual display
      run: |
        Xvfb :99 -ac &
        echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Run CLI and capture output
      run: |
        export RUST_LOG=debug
        timeout 60s ./target/release/screenpipe --debug > screenpipe_output.log 2> screenpipe_error.log || true

    - name: Check for crashes
      run: |
        if grep -q "panic" screenpipe_output.log; then
          echo "CLI crashed"
          cat screenpipe_output.log
          exit 1
        fi
        echo "CLI ran successfully without crashing"
        tail -n 100 screenpipe_output.log

    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: linux-logs
        path: |
          screenpipe_output.log
          screenpipe_error.log