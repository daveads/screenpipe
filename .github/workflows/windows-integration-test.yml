name: Windows CLI Integration Test

on:
  push:
    branches: [ cli-test ]
  pull_request:
    branches: [ cli-test ]

jobs:
  test-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install dependencies
      shell: pwsh
      run: |
        choco install ffmpeg openssl
        echo "C:\ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install Scream on Windows
      shell: powershell
      run: |
        Invoke-WebRequest https://github.com/duncanthrax/scream/releases/download/4.0/Scream4.0.zip -OutFile Scream4.0.zip
        Expand-Archive -Path Scream4.0.zip -DestinationPath Scream
        openssl req -batch -verbose -x509 -newkey rsa -keyout ScreamCertificate.pvk -out ScreamCertificate.cer -nodes -extensions v3_req
        openssl pkcs12 -export -nodes -in ScreamCertificate.cer -inkey ScreamCertificate.pvk -out ScreamCertificate.pfx -passout pass:

    - name: Setup MSVC Dev Cmd
      uses: ilammy/msvc-dev-cmd@v1

    - name: Sign and Install Scream Driver on Windows
      shell: powershell
      run: |
        signtool sign /v /fd SHA256 /f ScreamCertificate.pfx Scream\Install\driver\x64\Scream.cat
        Import-Certificate -FilePath ScreamCertificate.cer -CertStoreLocation Cert:\LocalMachine\root
        Import-Certificate -FilePath ScreamCertificate.cer -CertStoreLocation Cert:\LocalMachine\TrustedPublisher
        Scream\Install\helpers\devcon-x64.exe install Scream\Install\driver\x64\Scream.inf *Scream
      timeout-minutes: 5

    - name: Start Windows Audio Service
      shell: powershell
      run: net start audiosrv

    - name: Build CLI
      run: cargo build --release

    - name: Prepare test image
      shell: pwsh
      run: |
        Add-Type -AssemblyName System.Drawing
        $bmp = New-Object System.Drawing.Bitmap 400, 100
        $g = [System.Drawing.Graphics]::FromImage($bmp)
        $g.Clear([System.Drawing.Color]::White)
        $font = New-Object System.Drawing.Font "Arial", 16
        $brush = New-Object System.Drawing.SolidBrush ([System.Drawing.Color]::Black)
        $g.DrawString("Hello, Screenpipe OCR Test", $font, $brush, 10, 40)
        $bmp.Save("test_image.png")
        $g.Dispose()
        $bmp.Dispose()

    - name: Run CLI and generate activity
      shell: pwsh
      run: |
        $env:RUST_LOG = "debug"
        $process = Start-Process -FilePath ".\target\release\screenpipe.exe" -ArgumentList "--debug" -PassThru -RedirectStandardOutput "screenpipe_output.log" -RedirectStandardError "screenpipe_error.log" -NoNewWindow
        Start-Sleep -Seconds 10

        # Display test image
        $image = Start-Process mspaint -ArgumentList "test_image.png" -PassThru
        Start-Sleep -Seconds 10
        Stop-Process -Id $image.Id

        # Play test audio
        $player = New-Object System.Media.SoundPlayer
        $player.SoundLocation = ".github\scripts\audio_test.wav"
        $player.PlaySync()

        Start-Sleep -Seconds 30  # Allow more time for processing
        Stop-Process -Id $process.Id -Force

    - name: Check for OCR and audio transcription
      shell: pwsh
      run: |
        $logContent = Get-Content "screenpipe_output.log" -Raw

        # Check for OCR result
        if ($logContent -match "Hello, Screenpipe OCR Test") {
          Write-Host "OCR test passed: Text was recognized"
        } else {
          Write-Host "OCR test failed: Text was not recognized"
          Write-Host "Log content:"
          Write-Host $logContent
          exit 1
        }

        # Check for audio transcription
        if ($logContent -match "human world") {
          Write-Host "Audio transcription test passed"
        } else {
          Write-Host "Audio transcription test failed"
          Write-Host "Log content:"
          Write-Host $logContent
          exit 1
        }

        # Display last 200 lines of log for debugging
        Get-Content "screenpipe_output.log" -Tail 200

    - name: Upload logs and data
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: windows-logs-and-data
        path: |
          screenpipe_output.log
          screenpipe_error.log
          ${{ env.USERPROFILE }}\.screenpipe\data\
          test_image.png
          .github\scripts\audio_test.wav

    - name: List captured files
      shell: pwsh
      run: |
        Write-Host "Listing files in .screenpipe\data directory:"
        Get-ChildItem -Path "$env:USERPROFILE\.screenpipe\data" -Recurse | Select-Object FullName, Length, CreationTime | Format-Table -AutoSize
