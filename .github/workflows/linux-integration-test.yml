name: Linux Integration Test
on:
  push:
    branches: [ cli-test ]
  pull_request:
    branches: [ cli-test ]
jobs:
  test-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb pulseaudio ffmpeg libasound2-dev libgtk-3-dev libwebkit2gtk-4.0-dev libavformat-dev libavfilter-dev libavdevice-dev x11-utils x11-apps xdotool openbox
    - name: Build CLI
      run: cargo build --release
    - name: Set up virtual display with window manager
      run: |
        Xvfb :99 -ac -screen 0 1280x1024x24 &
        echo "DISPLAY=:99" >> $GITHUB_ENV
        sleep 3
        export DISPLAY=:99
        openbox &
        sleep 3
        xdpyinfo || echo "xdpyinfo failed"
        xrandr || echo "xrandr failed"
        xprop -root _NET_CLIENT_LIST || echo "_NET_CLIENT_LIST not supported"
    - name: Set up virtual audio
      run: |
        pulseaudio --start
        pactl load-module module-null-sink sink_name=virtual_speaker
        pactl load-module module-virtual-source source_name=virtual_mic
    - name: Run CLI and capture output
      run: |
        export DISPLAY=:99
        export SCREENPIPE_CAPTURE_METHOD=x11 # Force X11 capture method
        ./target/release/screenpipe --debug > screenpipe_output.log 2>&1 &
        SCREENPIPE_PID=$!
        sleep 60
        kill $SCREENPIPE_PID
    - name: Check for crashes and expected behavior
      run: |
        echo "Checking for log file..."
        LOG_FILE=$(find $HOME -name screenpipe.log)
        if [ -n "$LOG_FILE" ]; then
          echo "Log file found at: $LOG_FILE"
          echo "Last 100 lines of log:"
          tail -n 100 "$LOG_FILE"
          if grep -q "panic" "$LOG_FILE"; then
            echo "CLI crashed"
            exit 1
          fi
          if ! grep -q "Server starting on 127.0.0.1:3030" "$LOG_FILE"; then
            echo "Server did not start correctly"
            exit 1
          fi
          if grep -q "XCap error occurred: _NET_CLIENT_LIST not supported" "$LOG_FILE"; then
            echo "XCap error still occurring"
            exit 1
          fi
          echo "CLI ran successfully for 60 seconds without crashing"
        else
          echo "Log file not found, checking standard output..."
          cat screenpipe_output.log
          if grep -q "panic" screenpipe_output.log; then
            echo "CLI crashed"
            exit 1
          fi
          if ! grep -q "Server starting on 127.0.0.1:3030" screenpipe_output.log; then
            echo "Server did not start correctly"
            exit 1
          fi
          if grep -q "XCap error occurred: _NET_CLIENT_LIST not supported" screenpipe_output.log; then
            echo "XCap error still occurring"
            exit 1
          fi
          echo "CLI ran successfully for 60 seconds without crashing"
        fi
    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-logs
        path: |
          ~/.screenpipe/logs/
          screenpipe_output.log
    - name: Upload captured data
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-data
        path: ~/.screenpipe/data/
