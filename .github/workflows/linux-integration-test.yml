name: Linux Integration Test

on:
  push:
    branches: [ cli-test ]
  pull_request:
    branches: [ cli-test ]

jobs:
  test-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb ffmpeg libasound2-dev libgtk-3-dev libwebkit2gtk-4.0-dev libavformat-dev libavfilter-dev libavdevice-dev x11-utils x11-apps xdotool openbox xterm fonts-liberation tesseract-ocr libtesseract-dev imagemagick fonts-dejavu alsa-utils pulseaudio pulseaudio-utils

    - name: Verify Tesseract installation
      run: |
        tesseract --version
        ldconfig -p | grep tesseract
        ls -l /usr/lib/x86_64-linux-gnu/libtesseract*

    - name: Build CLI
      run: cargo build --release

    - name: Set up virtual display with window manager
      run: |
        Xvfb :99 -ac -screen 0 1280x1024x24 &
        echo "DISPLAY=:99" >> $GITHUB_ENV
        sleep 3
        export DISPLAY=:99
        mkdir -p ~/.config/openbox
        echo '<openbox_config><menu><file>menu.xml</file></menu></openbox_config>' > ~/.config/openbox/rc.xml
        openbox --config-file ~/.config/openbox/rc.xml &
        sleep 3
        xterm -fa 'Liberation Mono' -fs 10 -e "while true; do echo 'Keeping xterm open'; sleep 60; done" &
        sleep 3
        xdpyinfo || echo "xdpyinfo failed"
        xrandr || echo "xrandr failed"
        xwininfo -root -children || echo "xwininfo failed"

    - name: Setup audio
      run: |
        pulseaudio --start
        sleep 2
        pactl load-module module-null-sink sink_name=virtual_speaker
        pactl set-default-sink virtual_speaker
        pactl load-module module-virtual-source source_name=virtual_mic master=virtual_speaker.monitor
        pactl set-default-source virtual_mic
        sleep 5
        
        # Verify audio setup
        pactl list short sinks
        pactl list short sources
        pactl info

    - name: Run Screenpipe
      run: |
        export PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native
        ./target/release/screenpipe --debug > screenpipe_output.log 2>&1 &
        SCREENPIPE_PID=$!
        echo $SCREENPIPE_PID > screenpipe.pid
        sleep 60  # Let screenpipe run for 60 seconds

    - name: Test OCR
      run: |
        echo "Creating test image..."
        convert -size 300x100 xc:white -font DejaVu-Sans -pointsize 24 -fill black -draw "text 10,50 'Hello, Screenpipe OCR'" test_image.png

        echo "Displaying test image..."
        DISPLAY=:99 display test_image.png &
        DISPLAY_PID=$!

        echo "Waiting for image to be processed..."
        sleep 30

        echo "Killing display process..."
        kill $DISPLAY_PID

        echo "Checking logs for OCR result..."
        if grep -qi "Hello, Screenpipe OCR" screenpipe_output.log; then
          echo "OCR test passed: Text was recognized"
        else
          echo "OCR test failed: Text was not recognized"
          echo "Last 100 lines of log:"
          tail -n 100 screenpipe_output.log
          exit 1
        fi

    - name: Test Audio Capture
      run: |
        echo "Verifying audio file exists..."
        ls -l .github/scripts/audio_test.wav
        
        echo "Playing audio file..."
        paplay --device=virtual_speaker .github/scripts/audio_test.wav
        
        echo "Waiting for audio to be processed..."
        sleep 30

        echo "Printing Screenpipe log content:"
        cat screenpipe_output.log

        echo "Checking logs for audio result..."
        if grep -qi "human world" screenpipe_output.log; then
          echo "Audio capture test passed: 'human world' found in logs"
        elif grep -qi "audio" screenpipe_output.log; then
          echo "Audio capture test partially passed: Audio-related output found in logs, but not the specific phrase"
          echo "Grep results for 'audio':"
          grep -i "audio" screenpipe_output.log
        else
          echo "Audio capture test failed: Neither 'human world' nor audio-related output found in logs"
          echo "Last 100 lines of log:"
          tail -n 100 screenpipe_output.log
          exit 1
        fi

    - name: Stop screenpipe
      run: |
        kill $(cat screenpipe.pid)
        sleep 5  # Give time for graceful shutdown

    - name: Check for crashes and expected behavior
      run: |
        echo "Checking log file..."
        echo "Last 100 lines of log:"
        tail -n 100 screenpipe_output.log
        if grep -q "panic" screenpipe_output.log; then
          echo "CLI crashed"
          exit 1
        fi
        if ! grep -q "Server starting on 127.0.0.1:3030" screenpipe_output.log; then
          echo "Server did not start correctly"
          exit 1
        fi
        if grep -q "No windows found" screenpipe_output.log; then
          echo "No windows were detected"
          exit 1
        fi
        if grep -q "tesseract not found" screenpipe_output.log; then
          echo "Tesseract OCR not found"
          exit 1
        fi
        echo "CLI ran successfully without crashing"

    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-logs
        path: screenpipe_output.log

    - name: Upload captured data
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-data
        path: ~/.screenpipe/data/

    - name: Upload test image
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-image
        path: test_image.png