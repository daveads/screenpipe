name: Linux Integration Test

on:
  push:
    branches: [ cli-test ]
  pull_request:
    branches: [ cli-test ]

jobs:
  test-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]  # Test on different OS versions

    steps:
    - uses: actions/checkout@v3

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb ffmpeg libasound2-dev libgtk-3-dev libwebkit2gtk-4.0-dev libavformat-dev libavfilter-dev libavdevice-dev x11-utils x11-apps xdotool openbox xterm fonts-liberation tesseract-ocr libtesseract-dev imagemagick fonts-dejavu alsa-utils pulseaudio pulseaudio-utils

    - name: Verify Tesseract installation
      run: |
        tesseract --version
        ldconfig -p | grep tesseract
        ls -l /usr/lib/x86_64-linux-gnu/libtesseract*

    - name: Build CLI
      run: cargo build --release

    - name: Set up virtual display with window manager
      run: |
        Xvfb :99 -ac -screen 0 1280x1024x24 &
        echo "DISPLAY=:99" >> $GITHUB_ENV
        sleep 3
        export DISPLAY=:99
        mkdir -p ~/.config/openbox
        echo '<openbox_config><menu><file>menu.xml</file></menu></openbox_config>' > ~/.config/openbox/rc.xml
        openbox --config-file ~/.config/openbox/rc.xml &
        sleep 3
        xterm -fa 'Liberation Mono' -fs 10 -e "while true; do echo 'Keeping xterm open'; sleep 60; done" &
        sleep 3
        xdpyinfo || echo "xdpyinfo failed"
        xrandr || echo "xrandr failed"
        xwininfo -root -children || echo "xwininfo failed"

    - name: Setup audio
      run: |
        pulseaudio --kill || true
        sleep 2
        pulseaudio --start --log-target=syslog --system=false --disallow-exit --exit-idle-time=-1 --daemon
        sleep 5
        pactl load-module module-null-sink sink_name=virtual_speaker
        pactl set-default-sink virtual_speaker
        pactl load-module module-virtual-source source_name=virtual_mic master=virtual_speaker.monitor
        pactl set-default-source virtual_mic

        # Verify audio setup
        pactl list short sinks
        pactl list short sources
        pactl info

        # Check PulseAudio socket
        ls -l /run/user/$(id -u)/pulse/ || echo "PulseAudio socket missing"

    - name: Run Screenpipe
      run: |
        export XDG_RUNTIME_DIR=/run/user/$(id -u)
        export PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native
        ./target/release/screenpipe --debug > screenpipe_output.log 2>&1 &
        SCREENPIPE_PID=$!
        echo $SCREENPIPE_PID > screenpipe.pid
        sleep 60  # Let screenpipe run for 60 seconds

    - name: Test OCR
      run: |
        convert -size 300x100 xc:white -font DejaVu-Sans -pointsize 24 -fill black -draw "text 10,50 'Hello, Screenpipe OCR'" test_image.png
        DISPLAY=:99 display test_image.png &
        DISPLAY_PID=$!
        sleep 30
        kill $DISPLAY_PID
        if grep -qi "Hello, Screenpipe OCR" screenpipe_output.log; then
          echo "OCR test passed: Text was recognized"
        else
          echo "OCR test failed"
          exit 1
        fi

    - name: Test Audio Capture
      run: |
        if [[ ! -f .github/scripts/audio_test.wav ]]; then
          echo "Audio test file missing"
          exit 1
        fi
        pulseaudio --check
        PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native paplay --verbose .github/scripts/audio_test.wav
        sleep 30
        if grep -qi "human world" screenpipe_output.log; then
          echo "Audio capture test passed"
        else
          echo "Audio capture test failed"
          exit 1
        fi

    - name: Stop screenpipe
      run: |
        kill $(cat screenpipe.pid)
        sleep 5

    - name: Check for crashes and expected behavior
      run: |
        tail -n 100 screenpipe_output.log
        if grep -q "panic" screenpipe_output.log; then
          echo "CLI crashed"
          exit 1
        fi
        if ! grep -q "Server starting on 127.0.0.1:3030" screenpipe_output.log; then
          echo "Server did not start correctly"
          exit 1
        fi
        echo "CLI ran successfully without crashing"

    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-logs
        path: screenpipe_output.log

    - name: Upload captured data
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenpipe-data
        path: ~/.screenpipe/data/

    - name: Upload test image
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-image
        path: test_image.png
